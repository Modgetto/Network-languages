Протокол HTTP
Что такое протокол?
Вы изучили язык Python настолько, что можете начать общение с серверами в интернете. Сначала небольшой обзор: что такое серверы, по каким правилам они общаются друг с другом, и как вступить в разговор с ними.

Интернет состоит из компьютеров. Программисты называют их на своём жаргоне «машины». Специальные машины — серверы — существуют для хранения информации и обработки запросов от клиентов. Браузеры на машинах пользователей называются клиенты. По команде пользователя клиент шлёт на сервер запрос. Чтобы серверы и клиенты понимали друг друга, производители сетевого оборудования и разработчики программ договорились, как именно будет передаваться информация. Такие договорённости называются протоколы.

Из сетевых протоколов для бэкенд-разработчика важнее всех HTTP (от англ. HyperText Transfer Protocol, «протокол передачи гипертекста»). Именно он отвечает за передачу написанных гипертекстом веб-страниц с сервера на клиент и обратно.

И где в этой цепочке начинается бэкенд? Рассмотрим работу протокола на примере взаимодействия пользователя с поисковой системой.

HTTP
Адрес сайта в интернете обычно начинается с букв http, потому что протокол HTTP — самый популярный. Всякий раз, когда вы открываете браузер и вводите в адресную строку адрес какой-нибудь веб-страницы (например, https://ya.ru) — содержимое страницы загружается по протоколу HTTP. Благодаря ему вы читаете этот текст.

Из интернета можно загрузить не только веб-страницы, но и другие объекты — например, картинки, видео, файлы. Адресу каждого объекта в интернете соответствует особое имя — URL.



Если мы спросим у Яндекса, что такое backend, то результаты поиска будут доступны по URL https://yandex.ru/search/?text=что%20такое%20backend&lr=213 :



Ваш вопрос «что такое backend» браузер превращает в HTTP-запрос, который направляет серверу Яндекса.
Сервер Яндекса, получив HTTP-запрос от клиента, совершает особую серверную магию (производит необходимые действия) и возвращает HTTP-ответ.
Проследим судьбу поискового запроса «что такое backend». Что происходило с ним, пока браузер и сервер Яндекса обменивались HTTP-запросами и HTTP-ответами?

Задача №1 Подробнее про URL
Адреса URL могут выглядеть очень коротко и просто, как https://ya.ru/white.

А могут длиннее и сложнее: когда мы искали в Яндексе информацию по запросу «что такое backend», то результаты поиска получили по адресу:

https://yandex.ru/search/?text=что%20такое%20backend&lr=213
В начале указывается протокол. Обычно это HTTP или HTTPS — расширение протокола HTTP.
yandex.ru — имя сервера.
/search/ — идентификатор запрашиваемого ресурса на сервере. В этом примере мы обращаемся к сервису поиска.
После вопросительного знака могут идти параметры, они отделяются друг от друга символом &. В нашем случае серверу поиска были переданы два параметра:
t, со значением что%20такое%20backend;
lr, со значением 213.
Что значит lr, пользователю неважно — имена технических параметров в каждом поисковом сервисе свои.
Кодирование URL
Разберёмся, что за странная последовательность %20 появилась в строке что%20такое%20backend. Почему было не поставить пробел между словами?

Согласно протоколу HTTP, в URL можно использовать только латинские буквы, цифры, дефисы, знак подчёркивания и некоторые другие спецсимволы. Если в URL применяются какие-то «запрещённые» символы — их кодируют с помощью «разрешённых». Для кодирования применяют специальные последовательности, где символы (буквы кириллицы, иероглифы, знаки препинания и спецсимволы… все возможные символы) кодируются комбинацией букв и цифр, перед которым ставится знак процента.

Таким образом пробелы превращаются в %20.

Текст задачи
У вас есть запрос «как стать бэкенд-разработчиком». Соберите URL страницы, на которой Яндекс покажет результаты поиска по этому запросу.

user_query = 'как стать бэкенд-разработчиком'

url = 'https://yandex.ru/search/?text=' +  # ваш код здесь

print(url)
Кириллица в адресной строке
В адресе, который мы препарировали в прошлом уроке, слова «что» и «такое» записаны как есть, хотя они состоят не из латинских букв. Почему?

https://yandex.ru/search/?text=что%20такое%20backend&lr=2
За это можно поблагодарить браузер — он позаботился о пользователе и показал адрес в читаемом виде (хотя сам браузер работает с закодированным адресом).

Не все браузеры такие дружелюбные — многие отобразят это URL в кодированном виде:

https://yandex.ru/search/?text=%D1%87%D1%82%D0%BE%20%D1%82%D0%B0%D0%BA%D0%BE%D0%B5%20backend&lr=213
Немного программирования
Кодировать URL умеют не только браузеры: это высокое искусство доступно даже начинающим разработчикам (например, вам). За инструментами далеко ходить не придётся: в Python есть библиотека urllib.parse.

Функция quote() из библиотеки urllib.parse умеет заменять символы, которые нельзя использовать по протоколу HTTP в URL на те, которые использовать можно. Но человеку такой адрес прочитать невозможно.

Например, в URL нельзя использовать символы кириллицы. И если нужно обратиться к адресу, который содержит кириллицу — кириллические символы нужно закодировать.

Например:

было Привет!,
стало %D0%9F%D1%80%D0%B8%D0%B2%D0%B5%D1%82%21.
Компьютер такое поймёт, а вот человек уже нет.

Для преобразования закодированных символов в обычные в той же библиотеке urllib.parse есть функция unquote(). Она конвертирует строку URL обратно в читаемый человеком формат.

Соберём список из нескольких строк, в каждой из которых будет хотя бы один символ, который запрещён для использования в URL. Переберём эти строки в цикле и закодируем их в специальные символы:

import urllib.parse

strings = [
    'Что такое backend',
    'Привет!',
    ' ',        # Просто пробел.
    'letiště',  # Аэропорт по-чешски.
    'München',  # Крупнейший город Баварии.
    'Champs-Élysées',  # Елисейские поля.
    '東京',     # А это Токио.
]

for s in strings:
    encoded = urllib.parse.quote(s)          # Зашифрованная строка.
    decoded = urllib.parse.unquote(encoded)  # Расшифрованная обратно строка.
    print(decoded, '-', encoded)
Задача №2. Ты сервер Yandex
Почувствуйте себя веб-сервером Яндекса. Вы получили страшный URL — и чтобы ответить на запрос, вам нужно сперва понять, о чём же вас спрашивают.
Расшифруйте, какой вопрос задал Яндексу пользователь.

import urllib.parse


url = 'https://yandex.ru/search/?text=%D0%BA%D0%B0%D0%BA%20%D0%B1%D0%B5%D1%81%D0%BF%D0%BB%D0%B0%D1%82%D0%BD%D0%BE%20%D0%B5%D0%B7%D0%B4%D0%B8%D1%82%D1%8C%20%D0%BD%D0%B0%20%D1%82%D0%B0%D0%BA%D1%81%D0%B8'

# чтобы вычленить текст вопроса
# разбейте строку по знаку = и возьмите
# второй элемент получившегося списка 
question =  # сохраните его в переменной question

# напечатайте на экран запрос в расшифрованном виде
print(urllib.  # ваш код здесь
Исходный код страницы
Вы наблюдали, как браузер показывает веб-страницу с результатами поиска. Давайте разберёмся, как клиент вообще сумел понять, что нужно отобразить именно её.

У веб-страниц, как и у программ, есть исходный код. Давайте откроем его. В браузерах он доступен через меню:



В браузере Safari

Для просмотра исходного кода нужно в настройках браузера включить пункт меню «Разработка». Для этого в меню Safari > Настройки > закладка Дополнения > установите галочку Показывать меню «Разработка» в строке меню. В меню браузера появится пункт «Разработка», и, открыв в браузере любую веб-страницу, вы можете увидеть её код через меню Разработка > Показать программный код страницы.

Смотрите: браузер получил от сервера страницу, размеченную на языке HTML. Это и есть её исходный код. Браузер прочитал его и отрисовал страницу для пользователя.



Примечание: все популярные браузеры — Google Chrome, Mozilla Firefox, Internet Explorer (Microsoft Edge), Safari — тоже показывают исходный код страницы, но меню у них устроено несколько иначе.

HTML расшифровывается как Hyper Text Markup Language (англ. «язык разметки гипертекста»). С помощью специальных меток, HTML-тегов, обычный текст можно отформатировать — разделить на абзацы, добавить заголовки, картинки и гиперссылки; эту разметку браузер превращает в видимое форматирование текста.

Научиться писать на этом языке можно на курсе «Фронтенд-разработчик».

Задание №1
Откройте страницу курса «Python-разработчик» или «Python-разработчик Плюс» на Яндекс Практикум и в исходном коде этой страницы найдите «пасхалку», спрятанную в HTML-комментарии. Когда отыщете, переходите к следующему уроку.

Поиск по коду станет проще, если открыть поисковую строку браузера: Ctrl + F в Windows или Cmd + F в MacOS.

HTTP-ответы
Откуда взялся исходный код веб-страницы? Он пришёл с сервера в теле HTTP-ответа. Чтобы отследить появление этого ответа, откроем в браузере инструменты разработчика:



Выберите исследуемый элемент — страницу с поисковым запросом во вкладке Doc. Скорее всего, этот элемент обозначен иконкой с угловыми скобками или значком текстового документа. Если его не видно, перезагрузите страничку в браузере.

В правой части окна переключитесь на вкладку Response. Посмотрите, что в ней:



В Response находится уже знакомый код на HTML, это и есть тело HTTP-ответа. Но это не весь ответ: в соседних вкладках содержится масса полезной информации, которая сопровождает страницу. Так сервер заботится, чтобы браузер всё правильно понял, и пользователь не был бы разочарован.

Заголовки ответов
Полезная служебная информация ответа начинается с заголовков. Их можно увидеть там же, в Инструментах разработчика, переключившись на вкладку Headers.



Некоторые заголовки ответа можно понять прямо сейчас:

Request URL — Адрес страницы, которую запросил клиент. Обратите внимание, что здесь все кириллические буквы показываются в закодированном виде (но вы уже умеете их расшифровывать!)
Status Code — Код ответа. 200 Ok означает, что запрос был обработан успешно. Бывают ещё и другие коды. Вы могли сталкиваться с кодом ошибки 404 Not Found, когда пытались в браузере открыть несуществующую страницу. Или с 500 Internal Server Error , если на сервере что-то сломалось. Вообще, кодов ответа довольно много. Почитать о них подробнее можно по ссылке https://developer.mozilla.org/ru/docs/Web/HTTP/Status
Remote Address — IP-адрес сервера в интернете.
date — Дата и время, когда сервер создал ответ на запрос браузера.
content-type — Тип содержимого ответа. Что именно шлёт сервер — чаще всего текст в формате HTML, а также картинки в PNG или JPEG.
Поисследуйте свои любимые сайты Инструментами разработчика — посмотрите, как много приятных ответов “200 Ok” получает браузер при их открытии.

Задача №3
Попробуйте открыть несуществующую страницу, например вот эту, и посмотрите на код ответа. Когда откроете инструменты разработчика, не забудьте обновить страницу, чтобы увидеть HTTP-ответ. Когда найдете код ответа, переходите к следующему уроку. Если не найдёте — всё равно переходите, там интересно.

Перейдите в инструменты разработчика → Network → Headers → Status Code
Обнови страницу.

HTTP-запросы
HTTP-ответы мы разобрали. Но ответов не бывает без вопросов! Самое время рассмотреть подробнее HTTP-запросы.

В «Инструментах разработчика» разберём Request Headers того запроса, который браузер отправил серверу, чтобы показать нам страницу https://yandex.ru/search/?text=что такое backend&lr=213.

Откройте окно «Инструменты разработчика» (F12 или через меню браузера), в ней перейдите в закладку Network — и после этого откройте страницу в браузере.

Если страница была открыта — обновите её после того, как откроете панель Network, иначе информационное окно останется пустым.



В левой колонке выберите запрос, правее откроется окно с информацией о нём. Прокрутите до раздела Request Headers («заголовки запроса»).

Полезный и простой заголовок — accept-language — содержит список языков, на которых браузер готов принять ответ. В этом примере браузер готов принять содержимое страницы на русском (ru) или английском (en). q — параметр, определяющий языковые предпочтения браузера. en;q=0.9 означает, что браузер, получив ответ на английском языке, будет доволен на 90%. Для русского языка установлено значение параметра 1, что соответствует 100%.

Request Method говорит о методе запроса — браузер использовал метод GET протокола HTTP, чтобы получить содержимое страницы /search по протоколу.

Метод GET — самый распространённый в интернете. Он нужен, когда клиент хочет отослать серверу запрос, но не собирается ничего на сервер записывать.

Задача №4
Посмотрите через инструменты разработчика китайский поисковик baidu.com и американский yahoo.com. Найдите язык, на котором ваш браузер предпочитает видеть эти два сайта.

Инструменты разработчика → Network → Doc → Headers → Request Headers → accept-language
